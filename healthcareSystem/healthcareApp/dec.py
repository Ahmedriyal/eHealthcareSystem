import cryptography
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives.asymmetric import rsa
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.asymmetric import padding


def dec(cipher):
    with open("private_key.pem", "rb") as key_file:
        private_key = serialization.load_pem_private_key(
            key_file.read(),
            password=None,
            backend=default_backend()
        )

    original_message = private_key.decrypt(
        cipher,
        padding.OAEP(
            mgf=padding.MGF1(algorithm=hashes.SHA256()),
            algorithm=hashes.SHA256(),
            label=None
        )
    )
    return original_message

# print(dec(b'-\x98"3\xcf%\xaf\xd1\x94\x99Y\x86\xf66X\xc4Bq\x9fE\x9b\x1e\xff\xa0\xcc\x1bTg\xfe\xae\xce\xb0\xa0\xef\xe1h\x93\xc4\xf9i\x7f\x80H\xfcg3+H\x94\xe1\x80_O\x13\x05\xe0T\x99\xf1\xcb\xb6\x92e\\i\xa1\x8d\xb12\xe4\xf0\xb8\x00\xfb\xfb\xbd\xd2\x90\xa9\x03\xde\xb8\xb1\xf5\x1d\xbf\xa5O\xcfC\xb3xO\xe5o\xbb\xe2\x84\x0e}\xf9\xfd]\x00\x15\xf3d&\xcf\xf4\x8dp\x00\x88\xfd\xc2-\xd9\xf3]\xf4\xbd\x16F{ \x16U\xfc\x0c\xe3\xa2\xf4\xbc~=\xb1\xb2\xed\xd9.{\xd23\xa2\x7f\xd1\xeaUo\xf0NR\x01K\x05\x94O\xba^\xa4\xd6g\x12\xeb\x1b\xb6;\xeb\x86\x08G\xf2\xa6\x03I76\x7f`ui$=\xbd\xa7\xdd\x8e\\ZW\xf3\xd9\x95\xe9\xdb\xd6N\x1a\xa5k\xd9hc\xff\r+&*\x90(\xe2xS\xcf\xf6C`\xa5O\xe7dM\x98\x14`\xaa\x87\x1as!\x99\x1e\xf7H\xc8lL\x18\x80#\xb7\xa4/\x9a)\x98;m\x03HP\xf3\xae\x00n'))
